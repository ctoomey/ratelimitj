buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
//        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.6'
}


//apply plugin: 'org.junit.platform.gradle.plugin'

defaultTasks 'check'

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
    link 'GitHub', 'https://github.com/mokies/ratelimitj'
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
}

subprojects {
    
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'signing'

    checkstyle {
        configFile = rootProject.file('gradle/config/checkstyle/checkstyle.xml')
        toolVersion = '7.6.1'
    } 

    ext.junitVintageVersion = '4.12.0-M4'
    ext.junitPlatformVersion = '1.0.0-M4'
    ext.junitJupiterVersion = '5.0.0-M4'

    ext.libraries = [
            slf4j  : 'org.slf4j:slf4j-api:1.7.25',
            assertj: 'org.assertj:assertj-core:3.8.0',
            junit  : "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion",
            mockito: 'org.mockito:mockito-core:2.8.9',
            guava  : 'com.google.guava:guava:22.0',
            logback: 'ch.qos.logback:logback-classic:1.2.3',
            findbugs: 'com.google.code.findbugs:jsr305:3.0.2'
    ]
}

subprojects {

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}


ext {
    // Credentials for publication repositories (needed only for publishing)
    // Should be set in ${HOME}/.gradle/gradle.properties
    ossrhUser = project.hasProperty('ossrhUser') ? project.property('ossrhUser') : ""
    osshrPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ""
}

configure([project(':ratelimitj-redis'), project(':ratelimitj-inmemory'), project(':ratelimitj-core'), project(':ratelimitj-dropwizard')]) {

    apply plugin: 'signing'
    apply plugin: 'maven'

    project.group = 'es.moki.ratelimitj'
    project.version = '0.3.4'

    // OSSRH publication
    if (ossrhUser != "") {

        // Signature of artifacts
        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUser, password: osshrPassword)
                    }
                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUser, password: osshrPassword)
                    }

                    pom.project {
                        name 'es.moki.ratelimitj'
                        description 'The RateLimitJ project aims to provide a modular rate limiting solution'
                        packaging 'jar'
                        url 'https://github.com/mokies/ratelimitj'

                        scm {
                            connection 'scm:git:https://github.com/mokies/ratelimitj.git'
                            developerConnection 'scm:git:git@github.com:mokies/ratelimitj.git'
                            url 'https://github.com/mokies/ratelimitj.git'
                        }

                        licenses {
                            license {
                                name 'Apache License Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'mokies'
                                name = 'Craig Baker'
                            }
                        }
                    }
                }
            }
        }
    } else {
        uploadArchives {
            repositories {
                mavenLocal()
            }
        }
    }

    uploadArchives.dependsOn build

}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['es/moki/ratelimitj/test', 'es/moki/ratelimitj/inmemory', 'es/moki/ratelimitj/hazelcast'])
        })
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
// http://nemerosa.ghost.io/2015/07/01/publishing-to-the-maven-central-using-gradle/
// ./gradlew uploadArchives closeAndPromoteRepository









